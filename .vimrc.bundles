if &compatible
  set nocompatible
end

" Remove declared plugins
function! s:UnPlug(plug_name)
  if has_key(g:plugs, a:plug_name)
    call remove(g:plugs, a:plug_name)
  endif
endfunction
command!  -nargs=1 UnPlug call s:UnPlug(<args>)

let g:has_async = v:version >= 800 || has('nvim')

" All the plugins are specified as full URLs because I can Cmd+click on them.
" Each plugin is followed up with it's settings, making individual plugins'
" settings easier to manage, i.e. no need to find which settigns belong to
" which plugin across .vimrc.
call plug#begin('~/.vim/plugged')

    Plug 'https://github.com/flazz/vim-colorschemes.git' | Plug 'https://github.com/morhetz/gruvbox.git'
        let g:gruvbox_italicize_strings=0
        let g:gruvbox_improved_strings=0
        let g:gruvbox_improved_warnings=1
        let g:gruvbox_contrast_dark='hard'
        let g:gruvbox_invert_signs=0
        let g:gruvbox_invert_selection=0

    Plug 'https://github.com/vim-airline/vim-airline.git' | Plug 'https://github.com/vim-airline/vim-airline-themes.git'
        let g:airline_powerline_fonts = 1
        let g:airline_theme='gruvbox'
        let g:airline#extensions#tabline#enabled = 1
        let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
        noremap <Tab> :bnext<CR>
        noremap <S-Tab> :bprevious<CR>

    Plug 'https://github.com/tpope/vim-fugitive.git'

    Plug 'https://github.com/jmcantrell/vim-virtualenv.git'

    " Plug 'https://github.com/terryma/vim-multiple-cursors.git'

    Plug 'https://github.com/ryanoasis/vim-devicons.git'

    Plug 'https://github.com/junegunn/fzf.git', { 'do': { -> fzf#install() } } | Plug 'https://github.com/junegunn/fzf.vim.git'
        if exists('g:loaded_fugitive')
            nnoremap <expr> <C-p> fugitive#head() != '' ? ':GFiles! --cached --others --exclude-standard<CR>' : ':Files!<CR>'
            nnoremap <expr> <C-o> fugitive#head() != '' ? ':GFiles!?<CR>' : ''
        else
            silent! !git rev-parse --is-inside-work-tree
            if v:shell_error == 0
              nnoremap <C-p> :GFiles! --cached --others --exclude-standard<CR>
              nnoremap <C-o> :GFiles!?<CR>
            else
              nnoremap <C-p> :Files!<CR>
              nnoremap <C-o> :echom "Not a GIT repo ¯\\_(ツ)_/¯"<CR>
            endif
        endif
        nnoremap <leader>bb :Buffers!<CR>
        nnoremap <leader>fb :BLines!<CR>
        nnoremap <leader>bl :BLines!<CR>
        nnoremap <leader>fl :Lines!<CR>

        command! -bang -nargs=* Rg
                    \ call fzf#vim#grep(
                    \   'rg --column --line-number --hidden --ignore-case --no-heading --color=always '.shellescape(<q-args>), 1,
                    \   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
                    \           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),
                    \   <bang>0)

        function! RipgrepFzf(query, fullscreen)
            let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
            let initial_command = printf(command_fmt, shellescape(a:query))
            let reload_command = printf(command_fmt, '{q}')
            let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
            call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
        endfunction
        command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

        nnoremap <leader>ff :Rg!<CR>
        nnoremap <leader>FF :RG!<CR>

    Plug 'https://github.com/preservim/nerdtree.git', { 'on': ['NERDTreeToggle', 'NERDTreeFind', 'NERDTreeCWD'] } 
        \ | Plug 'https://github.com/Xuyuanp/nerdtree-git-plugin.git'
        noremap <F2> :NERDTreeToggle <CR>
        " Tree Toggle.
        nnoremap <leader>tt :NERDTreeToggle <CR>
        " Tree Reveal.
        nnoremap <leader>tr :NERDTreeFind <CR>
        " Tree CWD.
        nnoremap <leader>tc :NERDTreeCWD <CR>

        let NERDTreeShowHidden=1
        let NERDTreeQuitOnOpen=1
        let NERDTreeSortHiddenFirst=0
        let NERDTreeIgnore=['\.pyc$', '\.bak$', '.git[[dir]]']

        let g:NERDTreeShowIgnoredStatus = 1

        " NERDTress File highlighting
        " https://github.com/preservim/nerdtree/issues/433#issuecomment-92590696
        function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
            exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
            exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
        endfunction

        call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
        call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
        call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
        call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
        call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
        call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
        call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
        call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
        call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
        call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
        call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
        call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
        call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')

    Plug 'https://github.com/preservim/nerdcommenter.git'
        nmap <C-_> :call NERDComment("n","Invert") <CR>
        nmap <D-_> :call NERDComment("n","Invert") <CR>

    Plug 'https://github.com/fatih/vim-go.git', { 'do': ':GoUpdateBinaries', 'for': 'go' }
        autocmd FileType go nmap <leader>gi <Plug>(go-info)
        autocmd FileType go nmap <leader>gd <Plug>(go-def)
        autocmd FileType go nmap <leader>b :GoDefPop<CR>
        autocmd FileType go nmap <leader>s :GoSameIds<CR>
        autocmd FileType go nmap <leader>r :GoRename<CR>
        autocmd FileType go let g:go_auto_type_info = 1
        autocmd FileType go set updatetime=100

    Plug 'https://github.com/tpope/vim-surround.git'

    Plug 'https://github.com/plasticboy/vim-markdown.git'

    Plug 'https://github.com/dhruvasagar/vim-table-mode.git', { 'for': 'markdown' }
        autocmd FileType markdown :TableModeEnable
        autocmd FileType markdown let g:table_mode_corner="|"

    Plug 'https://github.com/vim-scripts/kwbdi.vim.git'

    Plug 'https://github.com/sheerun/vim-polyglot.git'

    Plug 'https://github.com/neoclide/coc.nvim.git', {'branch': 'release', 'do': ':CocInstall coc-phpls' }
        " TODO: purchse licence from https://intelephense.com/
        " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
        " position. Coc only does snippet and additional edit on confirm.
        if exists('*complete_info')
            inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
        else
            imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
        endif
        " GoTo code navigation.
        nmap <silent> <leader>gd <Plug>(coc-definition)
        nmap <silent> <leader>gr <Plug>(coc-references)
        " ONLY AVAILABLE WITH REGISTRATION KEY "
        nmap <leader>rn <Plug>(coc-rename)
        nmap <silent> <leader>gy <Plug>(coc-type-definition)
        nmap <silent> <leader>gi <Plug>(coc-implementation)
        " Use K to show documentation in preview window.
        nnoremap <silent> K :call <SID>show_documentation()<CR>
        function! s:show_documentation()
            if (index(['vim','help'], &filetype) >= 0)
                execute 'h '.expand('<cword>')
            else
                call CocAction('doHover')
            endif
        endfunction
        " Use tab for trigger completion with characters ahead and navigate.
        " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
        " other plugin before putting this into your config.
        inoremap <silent><expr> <TAB>
                    \ pumvisible() ? "\<C-n>" :
                    \ <SID>check_back_space() ? "\<TAB>" :
                    \ coc#refresh()
        inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

        function! s:check_back_space() abort
            let col = col('.') - 1
            return !col || getline('.')[col - 1]  =~# '\s'
        endfunction

        " navigate to a symbol in current buffer (for now php only).
        autocmd FileType php nnoremap <leader>gs :CocList outline<CR>

        inoremap <silent><expr> <c-space> coc#refresh()

        " Give more space for displaying messages.
        set cmdheight=2

        " Don't pass messages to |ins-completion-menu|.
        set shortmess+=c

        " Always show the signcolumn, otherwise it would shift the text each time
        " diagnostics appear/become resolved.
        set signcolumn=yes

    Plug 'https://github.com/airblade/vim-gitgutter.git'

    if g:has_async
        Plug 'https://github.com/desmap/ale-sensible.git' | Plug 'https://github.com/dense-analysis/ale.git'
            let b:ale_fixers = {'php': ['phpcbf']}
    else
        Plug 'https://github.com/vim-syntastic/syntastic.git'
            autocmd FileType php let g:syntastic_php_checkers = ['php']
    endif

    " Using both since not yet decided which one I prefer better.
    Plug 'https://github.com/simnalamburt/vim-mundo.git', { 'on': 'MundoToggle' }
        let g:mundo_width = 40
        let g:mundo_preview_height = 15
        let g:mundo_right = 1
        let g:mundo_close_on_revert = 1
        let g:mundo_playback_delay = 200
        let g:mundo_preview_bottom = 1
        nnoremap <leader>U :MundoToggle <CR>

    Plug 'https://github.com/mbbill/undotree.git'
        nnoremap <leader>u :UndotreeToggle <CR>
        let g:undotree_WindowLayout = 4
        let g:undotree_SetFocusWhenToggle = 1
        let g:undotree_ShortIndicators = 1
        let g:undotree_SplitWidth = 30

    Plug 'https://github.com/liuchengxu/vista.vim.git'
        " show symbols.
        nnoremap <leader>ss :Vista!! <CR>

        function! NearestMethodOrFunction() abort
            return get(b:, 'vista_nearest_method_or_function', '')
        endfunction
        set statusline+=%{NearestMethodOrFunction()}
        " show nearest method or function on VIM load.
        autocmd VimEnter * call vista#RunForNearestMethodOrFunction()

        let g:vista_executive_for = {
                    \ 'php': 'coc',
                    \ }
        let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
        let g:vista_fzf_preview = ['right:50%']
        let g:vista#renderer#enable_icon = 1
        let g:vista#renderer#icons = {
                    \  "function": "\uf794",
                    \  "variable": "\uf71b",
                    \ }

    if filereadable(expand("~/.vimrc.bundles.local"))
      source ~/.vimrc.bundles.local
    endif


    " fholgado/minibufexpl
    " wincent/Command-T
    " ervandew/supertab
    " Chiel92/vim-autoformat
    " editorconfig/editorconfig-vim
    " stephpy/vim-php-cs-fixer
    " ctrlpvim/ctrlp.vim
    " mileszs/ack.vim
    " jwalton512/vim-blade
    " isRuslan/vim-es6
    " mxw/vim-jsx
    " zxqfl/tabnine-vim

call plug#end()
