if &compatible
  set nocompatible
end

" Remove declared plugins
function! s:UnPlug(plug_name)
  if has_key(g:plugs, a:plug_name)
    call remove(g:plugs, a:plug_name)
  endif
endfunction
command!  -nargs=1 UnPlug call s:UnPlug(<args>)

let g:has_async = v:version >= 800 || has('nvim')

" All the plugins are specified as full URLs because I can Cmd+click on them.
" Each plugin is followed up with it's settings, making individual plugins'
" settings easier to manage, i.e. no need to find which settigns belong to
" which plugin across .vimrc.
call plug#begin('~/.vim/plugged')

    Plug 'https://github.com/tpope/vim-fugitive.git'

    Plug 'https://github.com/jmcantrell/vim-virtualenv.git'

    Plug 'https://github.com/vim-airline/vim-airline.git' | Plug 'vim-airline/vim-airline-themes'
        " consider: https://github.com/itchyny/lightline.vim
        " set statusline=[%{getcwd()}]\ %<%f%h%m%r\ [:b%n]\ %y\ %{fugitive#statusline()}\ %b\ ENC\:\ %{&encoding}\ TERM\:\ %{&termencoding}\ %l,%c%V\ %P
        let g:airline_theme='wombat'

    " Plug 'https://github.com/terryma/vim-multiple-cursors'

    Plug 'https://github.com/ryanoasis/vim-devicons.git'

    Plug 'https://github.com/bagrat/vim-buffet.git'
        let g:buffet_powerline_separators = 1
        let g:buffet_show_index = 1
        let g:buffet_tab_icon = "\uf00a"
        let g:buffet_left_trunc_icon = "\uf0a8"
        let g:buffet_right_trunc_icon = "\uf0a9"
        noremap <Tab> :bn<CR>
        noremap <S-Tab> :bp<CR>
        noremap <Leader><Tab> :Bw<CR>
        noremap <Leader><S-Tab> :Bw!<CR>
        noremap <C-t> :tabnew split<CR>
        function! g:BuffetSetCustomColors()
            hi! BuffetCurrentBuffer cterm=NONE ctermbg=106 ctermfg=8 guibg=#b8bb26 guifg=#000000
            hi! BuffetTrunc cterm=bold ctermbg=66 ctermfg=8 guibg=#458588 guifg=#000000
            hi! BuffetBuffer cterm=NONE ctermbg=239 ctermfg=8 guibg=#504945 guifg=#000000
            hi! BuffetTab cterm=NONE ctermbg=66 ctermfg=8 guibg=#458588 guifg=#000000
            hi! BuffetActiveBuffer cterm=NONE ctermbg=10 ctermfg=239 guibg=#999999 guifg=#504945
        endfunction
        nmap <leader>1 <Plug>BuffetSwitch(1)
        nmap <leader>2 <Plug>BuffetSwitch(2)
        nmap <leader>3 <Plug>BuffetSwitch(3)
        nmap <leader>4 <Plug>BuffetSwitch(4)
        nmap <leader>5 <Plug>BuffetSwitch(5)
        nmap <leader>6 <Plug>BuffetSwitch(6)
        nmap <leader>7 <Plug>BuffetSwitch(7)
        nmap <leader>8 <Plug>BuffetSwitch(8)
        nmap <leader>9 <Plug>BuffetSwitch(9)
        nmap <leader>0 <Plug>BuffetSwitch(10)

    Plug 'https://github.com/junegunn/fzf.git', { 'do': { -> fzf#install() } } | Plug 'https://github.com/junegunn/fzf.vim.git'
        if exists('g:loaded_fugitive')
            nnoremap <expr> <C-p> fugitive#head() != '' ? ':GFiles --cached --others --exclude-standard<CR>' : ':Files<CR>'
            nnoremap <expr> <C-o> fugitive#head() != '' ? ':GFiles?<CR>' : ''
        else
            silent! !git rev-parse --is-inside-work-tree
            if v:shell_error == 0
              nnoremap <C-p> :GFiles --cached --others --exclude-standard<CR>
              nnoremap <C-o> :GFiles?<CR>
            else
              nnoremap <C-p> :Files<CR>
            endif
        endif
        nnoremap <leader>bb :Buffers<CR>
        nnoremap <leader>fb :BLines<CR>
        nnoremap <leader>fl :Lines<CR>

    Plug 'https://github.com/preservim/nerdtree.git', { 'on': 'NERDTreeToggle' }
        noremap <F2> :NERDTreeToggle <CR>
        nnoremap <leader>ft :NERDTreeToggle <CR>

    Plug 'https://github.com/preservim/nerdcommenter.git'
        nmap <C-_> :call NERDComment("n","Invert") <CR>
        nmap <D-_> :call NERDComment("n","Invert") <CR>

    Plug 'https://github.com/fatih/vim-go.git', { 'do': ':GoUpdateBinaries', 'for': 'go' }
        autocmd FileType go nmap <leader>gi <Plug>(go-info)
        autocmd FileType go nmap <leader>gd <Plug>(go-def)
        autocmd FileType go nmap <leader>b :GoDefPop<CR>
        autocmd FileType go nmap <leader>s :GoSameIds<CR>
        autocmd FileType go nmap <leader>r :GoRename<CR>
        autocmd FileType go let g:go_auto_type_info = 1
        autocmd FileType go set updatetime=100

    Plug 'https://github.com/tpope/vim-surround.git'

    Plug 'https://github.com/plasticboy/vim-markdown.git'

    Plug 'https://github.com/dhruvasagar/vim-table-mode.git'
        autocmd FileType markdown :TableModeEnable
        autocmd FileType markdown let g:table_mode_corner="|"

    Plug 'https://github.com/vim-scripts/kwbdi.vim.git'

    Plug 'https://github.com/sheerun/vim-polyglot.git'

    Plug 'https://github.com/flazz/vim-colorschemes.git'

    Plug 'https://github.com/neoclide/coc.nvim.git', {'branch': 'release', 'do': ':CocInstall coc-phpls' }
        " TODO: purchse licence from https://intelephense.com/
        inoremap <silent><expr> <c-space> coc#refresh()
        " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
        " position. Coc only does snippet and additional edit on confirm.
        if has('patch8.1.1068')
            " Use `complete_info` if your (Neo)Vim version supports it.
            inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
        else
            imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
        endif
        " GoTo code navigation.
        nmap <silent> <leader>gd <Plug>(coc-definition)
        nmap <silent> <leader>gr <Plug>(coc-references)
        " only available with registration key
        nmap <silent> <leader>gy <Plug>(coc-type-definition)
        nmap <silent> <leader>gi <Plug>(coc-implementation)
        " Use K to show documentation in preview window.
        nnoremap <silent> K :call <SID>show_documentation()<CR>
        function! s:show_documentation()
            if (index(['vim','help'], &filetype) >= 0)
                execute 'h '.expand('<cword>')
            else
                call CocAction('doHover')
            endif
        endfunction
        " Use tab for trigger completion with characters ahead and navigate.
        " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
        " other plugin before putting this into your config.
        inoremap <silent><expr> <TAB>
                    \ pumvisible() ? "\<C-n>" :
                    \ <SID>check_back_space() ? "\<TAB>" :
                    \ coc#refresh()
        inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

        function! s:check_back_space() abort
            let col = col('.') - 1
            return !col || getline('.')[col - 1]  =~# '\s'
        endfunction

        " Give more space for displaying messages.
        set cmdheight=2

        " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
        " delays and poor user experience.
        set updatetime=300

        " Don't pass messages to |ins-completion-menu|.
        set shortmess+=c

        " Always show the signcolumn, otherwise it would shift the text each time
        " diagnostics appear/become resolved.
        set signcolumn=yes

    if g:has_async
        Plug 'https://github.com/dense-analysis/ale.git'
    else
        Plug 'https://github.com/vim-syntastic/syntastic.git'
            autocmd FileType php let g:syntastic_php_checkers = ['php']
    endif

    Plug 'https://github.com/jremmen/vim-ripgrep.git'
        let g:rg_highlight="true"
        nnoremap <leader>ff :Rg<Space>

    if filereadable(expand("~/.vimrc.bundles.local"))
      source ~/.vimrc.bundles.local
    endif


    " fholgado/minibufexpl
    " wincent/Command-T
    " ervandew/supertab
    " Chiel92/vim-autoformat
    " editorconfig/editorconfig-vim
    " stephpy/vim-php-cs-fixer
    " ctrlpvim/ctrlp.vim
    " mileszs/ack.vim
    " jwalton512/vim-blade
    " isRuslan/vim-es6
    " mxw/vim-jsx
    " zxqfl/tabnine-vim

call plug#end()
